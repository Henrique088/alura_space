para instalar pip install django


depois para criar o projeto, django-admin startproject setup .


o ponto é apenas para não criar outra pasta setup dentro de setup


rodar o servidor pela primeira vez, python manage.py runserver

pip freeze > requeriment.txt, para criar um aquivo com as dependencias


pip install python-dotenv, para instalar o pacote que serve para ocultar certas variaveis nas quais não queremos que sejam vistas. Como no caso do django o 



apos isso, criar um aquivo fora de pastas .env

e colocar no arquivo as variaveis que desejamos ocultar 
ex:
SECRET_KEY = django-insecure-mb%h&s_b(^g(n5dcuc-gr^k@fjgs2fx7gyk8)&sbqkzrwes+l0

logo apos importar os e importar from dotenv import load_dotenv

depois chamar 

load_dotenv()

e depois trocar a key 

SECRET_KEY = str(os.getenv('SECRET_KEY'))


python manage.py help, mostra as opcoes possiveis

python manage.py startapp nome, para iniciar um app que é as funções do nosso appp

depois precisamos colocar o app no arquivo settings.py em INSTALLED_APP{}


para que um app criado rode mediante um request é preciso que no arquivo views.py ...

from django.http import HttpResponse


def index(request):
    return HttpResponse('<h1>Alura Space</h1>')
    

depois disso ainda sim precisamos ir no arquivo urls.py e importar o aquivo views e a função criada

from galeria.views import index

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', index),
]


para evitar que criemos uma urlpatterns com 500 path. Vamos isolar cada path com seu determinado app, portanto dentro de cada app vamos criar nosso proprio arquivo urls.py e vamos apenas importar isso dentro do arquivo url.py principal. Com isso o arquivo principal vai ter apenas um indicativo de todos os path de cada app criado e não ter tudo literal o que ficaria enorme e péssimo de visualizar/fazer manutenção

para isso criamos um arquivo urls.py dentro da pasta do nosso app

ficando assim: 

from django.urls import path
from galeria.views import index


urlpatterns = [
    path('', index)
]

depois no arquivo urls.py do setup apagamos o import que havia do app pois não iremos precisar e vamos dar um import em include e em seguida adicionar o path com a função do include passando o nome do app mais o arquivo urls


from django.urls import path, include


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('galeria.urls')),
]




Agora como vamos importar um arquivo html ao invés de criar tudo dentro do views.py, bom iremos criar uma pasta chamada templete e nela vamo por os arquivos html, mas e para usa-lós? bom vamos colocar dentro do arquivo settings em TEMPLATES dir o deretório para as nossa pasta criada ficando assim: 'DIRS': [os.path.join(BASE_DIR, 'templates')],.... mas isso é o suficiente? Não.. pois ainda precisamos importar o html dentro do nosso veiws.py e para isso vamos muda-ló. Ao inves de usar o httresponse, vamos usar o proprio render que já vem importado, ficando assim: 

def index(request):
    return render(request, 'index.html')



Mas e os arquivos staticos (css), vamos importar. 

para isso dentro do arquivo settings.py vamos ter de criar diretórios como 


Indicar onde os arquivos estaticos estão dentro desta pasta
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'setup/static')
]


É o caminho absoluto do diretório onde o python vai coletar esses arquivos estaticos para fazer a implantação / manipulação aonde estão os arquivos estaticos 
STATIC_ROOT  = os.path.join(BASE_DIR, 'static')



depois criar uma pasta com o nome static em setup e depois jogamos os arquivos para dentro dela os assets e styles... apos isso temos que fazer o comando no terminal que vai carregar esses arquivos para o python meio que nota eles :   python manage.py collescstatic


feito isso vamo modificar o arquivo index html


{% load static %} colocamos isso no começo para carregar os arquivos staticos para dentro do html 


e depois vamos mudar o import do css

<link rel="stylesheet" href="{% static '/styles/style.css' %}">

enbedando, colocando codigo python dentro do html 

